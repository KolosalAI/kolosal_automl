{
  "benchmark_name": "Genta AutoML vs Standard ML Comparison",
  "version": "2.0.0",
  "description": "Comprehensive comparison between Genta AutoML and standard scikit-learn approaches",
  "output_dir": "./comparison_results",
  "timestamp": "auto",
  
  "comparison_settings": {
    "disable_genta_optimizations": true,
    "fair_comparison_mode": true,
    "single_thread_mode": true,
    "disable_batching": true,
    "disable_intel_optimization": true,
    "disable_memory_optimization": true,
    "iterations_per_optimization": 10,
    "cv_folds": 3,
    "num_trials": 5,
    "enable_trial_plotting": true
  },

  "device_configurations": [
    {
      "name": "cpu_only",
      "description": "CPU only processing",
      "device": "cpu",
      "num_threads": 1,
      "memory_limit_gb": null
    },
    {
      "name": "cpu_multi_thread",
      "description": "Multi-threaded CPU processing",
      "device": "cpu",
      "num_threads": 4,
      "memory_limit_gb": null
    },
    {
      "name": "cpu_high_memory",
      "description": "CPU with high memory allocation",
      "device": "cpu",
      "num_threads": 2,
      "memory_limit_gb": 8
    }
  ],

  "optimizer_configurations": [
    {
      "name": "random_search_small",
      "strategy": "random_search",
      "max_iter": 10,
      "cv_folds": 3,
      "scoring": "auto",
      "random_state": 42
    },
    {
      "name": "random_search_medium",
      "strategy": "random_search",
      "max_iter": 20,
      "cv_folds": 5,
      "scoring": "auto",
      "random_state": 42
    },
    {
      "name": "grid_search_small",
      "strategy": "grid_search",
      "cv_folds": 3,
      "scoring": "auto",
      "exhaustive": false
    }
  ],
  
  "datasets": {
    "small_classification": [
      {
        "name": "iris",
        "description": "Classic iris classification dataset (150 samples, 4 features)",
        "expected_task": "classification",
        "compatible_models": ["random_forest", "gradient_boosting", "logistic_regression"]
      },
      {
        "name": "wine",
        "description": "Wine recognition dataset (178 samples, 13 features)",
        "expected_task": "classification",
        "compatible_models": ["random_forest", "gradient_boosting", "logistic_regression"]
      }
    ],
    "medium_classification": [
      {
        "name": "breast_cancer",
        "description": "Breast cancer Wisconsin dataset (569 samples, 30 features)",
        "expected_task": "classification",
        "compatible_models": ["random_forest", "gradient_boosting", "logistic_regression"]
      },
      {
        "name": "digits",
        "description": "Handwritten digits dataset (1797 samples, 64 features)",
        "expected_task": "classification",
        "compatible_models": ["random_forest", "gradient_boosting", "logistic_regression"]
      }
    ],
    "small_regression": [
      {
        "name": "diabetes",
        "description": "Diabetes regression dataset (442 samples, 10 features)",
        "expected_task": "regression",
        "compatible_models": ["random_forest", "gradient_boosting", "ridge", "lasso"]
      }
    ],
    "medium_regression": [
      {
        "name": "california_housing",
        "description": "California housing dataset (20640 samples, 8 features)",
        "expected_task": "regression",
        "compatible_models": ["random_forest", "gradient_boosting", "ridge"]
      }
    ],
    "synthetic_small": [
      {
        "name": "synthetic_small_classification",
        "description": "Synthetic classification dataset (1000 samples, 20 features)",
        "expected_task": "classification",
        "compatible_models": ["random_forest", "gradient_boosting", "logistic_regression"]
      },
      {
        "name": "synthetic_small_regression",
        "description": "Synthetic regression dataset (1000 samples, 20 features)",
        "expected_task": "regression",
        "compatible_models": ["random_forest", "gradient_boosting", "ridge", "lasso"]
      }
    ],
    "synthetic_medium": [
      {
        "name": "synthetic_medium_classification",
        "description": "Synthetic classification dataset (5000 samples, 50 features)",
        "expected_task": "classification",
        "compatible_models": ["random_forest", "gradient_boosting", "logistic_regression"]
      },
      {
        "name": "synthetic_medium_regression",
        "description": "Synthetic regression dataset (5000 samples, 50 features)",
        "expected_task": "regression",
        "compatible_models": ["random_forest", "gradient_boosting", "ridge"]
      }
    ],
    "synthetic_large": [
      {
        "name": "synthetic_large_classification",
        "description": "Synthetic classification dataset (20000 samples, 100 features)",
        "expected_task": "classification",
        "compatible_models": ["random_forest", "gradient_boosting"]
      },
      {
        "name": "synthetic_xlarge_classification",
        "description": "Synthetic classification dataset (100000 samples, 200 features)",
        "expected_task": "classification",
        "compatible_models": ["random_forest", "gradient_boosting"]
      },
      {
        "name": "synthetic_xxlarge_classification",
        "description": "Synthetic classification dataset (1000000 samples, 500 features)",
        "expected_task": "classification",
        "compatible_models": ["random_forest", "gradient_boosting"]
      },
      {
        "name": "synthetic_massive_classification",
        "description": "Synthetic classification dataset (10000000 samples, 1000 features)",
        "expected_task": "classification",
        "compatible_models": ["random_forest"]
      },
      {
        "name": "synthetic_large_regression",
        "description": "Synthetic regression dataset (20000 samples, 100 features)",
        "expected_task": "regression",
        "compatible_models": ["random_forest", "gradient_boosting"]
      },
      {
        "name": "synthetic_xlarge_regression",
        "description": "Synthetic regression dataset (100000 samples, 200 features)",
        "expected_task": "regression",
        "compatible_models": ["random_forest", "gradient_boosting"]
      },
      {
        "name": "synthetic_xxlarge_regression",
        "description": "Synthetic regression dataset (1000000 samples, 500 features)",
        "expected_task": "regression",
        "compatible_models": ["random_forest", "gradient_boosting"]
      },
      {
        "name": "synthetic_massive_regression",
        "description": "Synthetic regression dataset (10000000 samples, 1000 features)",
        "expected_task": "regression",
        "compatible_models": ["random_forest"]
      }
    ],
    "real_world": [
      {
        "name": "openml_adult",
        "description": "Adult income prediction dataset from OpenML",
        "expected_task": "classification",
        "compatible_models": ["random_forest", "gradient_boosting", "logistic_regression"]
      }
    ]
  },
  
  "models": {
    "random_forest": {
      "description": "Random Forest ensemble method",
      "classification_params": {
        "n_estimators": [50, 100],
        "max_depth": [10, 20],
        "min_samples_split": [2, 5],
        "min_samples_leaf": [1, 2]
      },
      "regression_params": {
        "n_estimators": [50, 100],
        "max_depth": [10, 20],
        "min_samples_split": [2, 5]
      }
    },
    "gradient_boosting": {
      "description": "Gradient Boosting ensemble method",
      "classification_params": {
        "n_estimators": [50, 100],
        "learning_rate": [0.05, 0.1],
        "max_depth": [3, 5]
      },
      "regression_params": {
        "n_estimators": [50, 100],
        "learning_rate": [0.05, 0.1],
        "max_depth": [3, 5]
      }
    },
    "logistic_regression": {
      "description": "Logistic Regression linear classifier",
      "classification_params": {
        "C": [0.1, 1.0, 10.0],
        "solver": ["liblinear", "saga"],
        "penalty": ["l1", "l2"]
      }
    },
    "ridge": {
      "description": "Ridge Regression with L2 regularization",
      "regression_params": {
        "alpha": [0.1, 1.0, 10.0],
        "solver": ["auto", "svd"]
      }
    },
    "lasso": {
      "description": "Lasso Regression with L1 regularization",
      "regression_params": {
        "alpha": [0.01, 0.1, 1.0],
        "max_iter": [1000, 2000]
      }
    }
  },
  
  "optimization_strategies": {
    "grid_search": {
      "description": "Exhaustive grid search over parameter space",
      "cv_folds": 3,
      "scoring": "auto"
    },
    "random_search": {
      "description": "Random search over parameter space",
      "cv_folds": 3,
      "n_iter": 10,
      "scoring": "auto"
    }
  },
  
  "comparison_configurations": [
    {
      "name": "quick_comparison",
      "description": "Quick comparison on small datasets",
      "datasets": ["iris", "wine", "diabetes"],
      "models": ["random_forest", "logistic_regression", "ridge"],
      "optimization_strategy": "random_search"
    },
    {
      "name": "comprehensive_small",
      "description": "Comprehensive comparison on small to medium datasets",
      "datasets": [
        "iris", "wine", "breast_cancer", "diabetes", 
        "synthetic_small_classification", "synthetic_small_regression"
      ],
      "models": ["random_forest", "gradient_boosting", "logistic_regression", "ridge"],
      "optimization_strategy": "random_search"
    },
    {
      "name": "performance_test",
      "description": "Performance test on larger datasets",
      "datasets": [
        "breast_cancer", "digits", "california_housing",
        "synthetic_medium_classification", "synthetic_medium_regression"
      ],
      "models": ["random_forest", "gradient_boosting"],
      "optimization_strategy": "random_search"
    },
    {
      "name": "scalability_test",
      "description": "Scalability test across dataset sizes",
      "datasets": [
        "synthetic_small_classification", 
        "synthetic_medium_classification", 
        "synthetic_large_classification"
      ],
      "models": ["random_forest"],
      "optimization_strategy": "random_search"
    },
    {
      "name": "large_scale_test",
      "description": "Large scale performance test for big datasets",
      "datasets": [
        "synthetic_large_classification",
        "synthetic_xlarge_classification",
        "synthetic_xxlarge_classification"
      ],
      "models": ["random_forest", "gradient_boosting"],
      "optimization_strategy": "random_search"
    },
    {
      "name": "massive_scale_test",
      "description": "Massive scale test up to 10M samples",
      "datasets": [
        "synthetic_xlarge_classification",
        "synthetic_xxlarge_classification",
        "synthetic_massive_classification"
      ],
      "models": ["random_forest"],
      "optimization_strategy": "random_search"
    },
    {
      "name": "regression_scalability_test",
      "description": "Regression scalability test across dataset sizes",
      "datasets": [
        "synthetic_small_regression",
        "synthetic_medium_regression",
        "synthetic_large_regression",
        "synthetic_xlarge_regression"
      ],
      "models": ["random_forest", "gradient_boosting"],
      "optimization_strategy": "random_search"
    },
    {
      "name": "full_scalability_comparison",
      "description": "Complete scalability comparison from small to massive datasets",
      "datasets": [
        "synthetic_small_classification",
        "synthetic_medium_classification", 
        "synthetic_large_classification",
        "synthetic_xlarge_classification",
        "synthetic_xxlarge_classification",
        "synthetic_massive_classification"
      ],
      "models": ["random_forest"],
      "optimization_strategy": "random_search"
    },
    {
      "name": "algorithm_comparison",
      "description": "Compare different algorithms on same datasets",
      "datasets": ["breast_cancer", "wine"],
      "models": ["random_forest", "gradient_boosting", "logistic_regression"],
      "optimization_strategy": "random_search"
    }
  ],
  
  "metrics": {
    "classification": {
      "primary": "accuracy",
      "secondary": ["precision", "recall", "f1_score", "roc_auc"]
    },
    "regression": {
      "primary": "r2_score",
      "secondary": ["mean_squared_error", "mean_absolute_error", "rmse"]
    },
    "performance": {
      "training_time": "seconds",
      "prediction_time": "seconds",
      "memory_peak": "MB",
      "memory_final": "MB",
      "model_size": "MB"
    }
  },
  
  "reporting": {
    "output_formats": ["json", "html", "csv"],
    "include_charts": true,
    "chart_types": [
      "training_time_comparison",
      "accuracy_comparison", 
      "memory_usage_comparison",
      "scalability_analysis"
    ],
    "statistical_tests": true,
    "significance_level": 0.05,
    "include_system_info": true,
    "detailed_error_reporting": true
  },
  
  "system_requirements": {
    "minimum_memory_gb": 4,
    "recommended_memory_gb": 8,
    "python_version": ">=3.8",
    "required_packages": [
      "numpy>=1.21.0",
      "pandas>=1.3.0",
      "scikit-learn>=1.0.0",
      "matplotlib>=3.5.0",
      "seaborn>=0.11.0",
      "psutil>=5.8.0"
    ]
  }
}
