# Production-ready Docker Compose configuration for kolosal AutoML
# Version: 2.0

version: '3.9'

# Define custom networks for better isolation
networks:
  kolosal-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Define persistent volumes
volumes:
  kolosal-models:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./volumes/models
  kolosal-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./volumes/logs
  kolosal-temp:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./volumes/temp
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

services:
  # Main AutoML API service
  kolosal-api:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-}
        VCS_REF: ${VCS_REF:-}
        VERSION: ${VERSION:-0.2.0}
    image: kolosal-automl:${VERSION:-latest}
    container_name: kolosal-automl-api
    restart: unless-stopped
    
    # Network configuration
    networks:
      - kolosal-network
    
    # Port configuration
    ports:
      - "${API_PORT:-8000}:8000"
    
    # Environment variables
    environment:
      # API Configuration
      - API_ENV=${API_ENV:-production}
      - API_DEBUG=${API_DEBUG:-false}
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - API_WORKERS=${API_WORKERS:-4}
      
      # Enhanced Security Configuration
      - SECURITY_ENV=${SECURITY_ENV:-production}
      - SECURITY_ENFORCE_HTTPS=${SECURITY_ENFORCE_HTTPS:-false}
      - SECURITY_REQUIRE_API_KEY=${SECURITY_REQUIRE_API_KEY:-true}
      - SECURITY_ENABLE_RATE_LIMITING=${SECURITY_ENABLE_RATE_LIMITING:-true}
      - SECURITY_RATE_LIMIT_REQUESTS=${SECURITY_RATE_LIMIT_REQUESTS:-100}
      - SECURITY_RATE_LIMIT_WINDOW=${SECURITY_RATE_LIMIT_WINDOW:-60}
      - SECURITY_ENABLE_JWT=${SECURITY_ENABLE_JWT:-true}
      - SECURITY_JWT_EXPIRY_HOURS=${SECURITY_JWT_EXPIRY_HOURS:-24}
      - SECURITY_ENABLE_AUDIT_LOGGING=${SECURITY_ENABLE_AUDIT_LOGGING:-true}
      - SECURITY_ALLOWED_ORIGINS=${SECURITY_ALLOWED_ORIGINS:-}
      - SECURITY_HSTS_MAX_AGE=${SECURITY_HSTS_MAX_AGE:-31536000}
      - MAX_REQUEST_SIZE=${MAX_REQUEST_SIZE:-10485760}  # 10MB
      
      # API Keys (use secrets in production)
      - API_KEYS=${API_KEYS:-}
      - JWT_SECRET=${JWT_SECRET:-}
      
      # Batch Processing Configuration
      - BATCH_INITIAL_SIZE=${BATCH_INITIAL_SIZE:-16}
      - BATCH_MIN_SIZE=${BATCH_MIN_SIZE:-2}
      - BATCH_MAX_SIZE=${BATCH_MAX_SIZE:-128}
      - BATCH_TIMEOUT=${BATCH_TIMEOUT:-0.02}
      - BATCH_MAX_QUEUE_SIZE=${BATCH_MAX_QUEUE_SIZE:-10000}
      - ENABLE_ADAPTIVE_BATCHING=${ENABLE_ADAPTIVE_BATCHING:-true}
      - ENABLE_MONITORING=${ENABLE_MONITORING:-true}
      - BATCH_NUM_WORKERS=${BATCH_NUM_WORKERS:-8}
      - ENABLE_MEMORY_OPTIMIZATION=${ENABLE_MEMORY_OPTIMIZATION:-true}
      
      # Logging Configuration
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENABLE_AUDIT_LOGGING=${ENABLE_AUDIT_LOGGING:-true}
      
      # Redis Configuration (if using Redis)
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_DB=${REDIS_DB:-0}
      
    # Volume mounts for persistence
    volumes:
      - kolosal-models:/app/models
      - kolosal-logs:/app/logs
      - kolosal-temp:/app/temp_data
      - ./configs:/app/configs:ro
      
    # Resource limits
    deploy:
      resources:
        limits:
          memory: ${API_MEMORY_LIMIT:-4G}
          cpus: '${API_CPU_LIMIT:-2.0}'
        reservations:
          memory: ${API_MEMORY_RESERVATION:-2G}
          cpus: '${API_CPU_RESERVATION:-1.0}'
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
      
    # Dependencies
    depends_on:
      redis:
        condition: service_healthy
    
    # Labels for service discovery and management
    labels:
      - "com.kolosal.service=api"
      - "com.kolosal.version=${VERSION:-latest}"
      - "traefik.enable=true"
      - "traefik.http.routers.kolosal.rule=Host(`${API_DOMAIN:-localhost}`)"
      - "traefik.http.services.kolosal.loadbalancer.server.port=8000"
      - "traefik.http.routers.kolosal.tls=true"

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: kolosal-redis
    restart: unless-stopped
    networks:
      - kolosal-network
    ports:
      - "${REDIS_PORT:-6379}:6379"
    
    # Redis configuration
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory ${REDIS_MAXMEMORY:-256mb}
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    
    volumes:
      - redis-data:/data
      
    # Resource limits
    deploy:
      resources:
        limits:
          memory: ${REDIS_MEMORY_LIMIT:-512M}
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    labels:
      - "com.kolosal.service=redis"

  # Nginx reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    container_name: kolosal-nginx
    restart: unless-stopped
    networks:
      - kolosal-network
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/nginx/certs:ro
      - ./static:/usr/share/nginx/html:ro
      
    depends_on:
      - kolosal-api
    
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    labels:
      - "com.kolosal.service=nginx"

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: kolosal-prometheus
    restart: unless-stopped
    networks:
      - kolosal-network
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
      
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
      - '--web.external-url=http://localhost:${PROMETHEUS_PORT:-9090}'
    
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.1'
    
    labels:
      - "com.kolosal.service=monitoring"
      - "com.kolosal.monitoring=prometheus"

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: kolosal-grafana
    restart: unless-stopped
    networks:
      - kolosal-network
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_SERVER_ROOT_URL=http://localhost:${GRAFANA_PORT:-3000}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      
    depends_on:
      - prometheus
    
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'
    
    labels:
      - "com.kolosal.service=monitoring"
      - "com.kolosal.monitoring=grafana"

  # Log aggregation with Loki (optional)
  loki:
    image: grafana/loki:latest
    container_name: kolosal-loki
    restart: unless-stopped
    networks:
      - kolosal-network
    ports:
      - "${LOKI_PORT:-3100}:3100"
    
    command: -config.file=/etc/loki/local-config.yaml
    
    volumes:
      - ./monitoring/loki:/etc/loki:ro
      
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'
    
    labels:
      - "com.kolosal.service=logging"
      - "com.kolosal.logging=loki"

# Configuration for development override
# Use: docker-compose -f compose.yaml -f compose.dev.yaml up
x-development: &development
  environment:
    API_ENV: development
    API_DEBUG: true
    SECURITY_ENV: development
    SECURITY_REQUIRE_API_KEY: false
    SECURITY_ENABLE_RATE_LIMITING: false
    LOG_LEVEL: DEBUG

