[project]
name = "kolosal-automl"
version = "0.2.0"
description = "Production-ready AutoML framework with advanced optimization capabilities"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Genta Technology", email = "contact@genta.tech"}
]
requires-python = ">=3.9"
keywords = ["automl", "machine-learning", "optimization", "production"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research", 
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

# Core dependencies - minimal for basic functionality
dependencies = [
    # Core ML and data processing
    "numpy>=1.21.0,<2.0.0",
    "pandas>=1.3.0,<3.0.0",
    "scikit-learn>=1.1.0,<2.0.0",
    "scipy>=1.7.0,<2.0.0",
    # Data handling
    "pyarrow>=10.0.0,<20.0.0",
    "joblib>=1.1.0,<2.0.0",
    # Basic ML models
    "xgboost>=1.6.0,<4.0.0",
    "lightgbm>=3.3.0,<5.0.0",
    # Hyperparameter optimization
    "optuna>=3.0.0,<5.0.0",
    # System monitoring
    "psutil>=5.8.0,<8.0.0",
    # Configuration
    "pyyaml>=6.0,<7.0",
    "colorlog>=6.0.0,<7.0.0",
    # Performance (optional with fallback)
    "threadpoolctl>=3.0.0,<4.0.0",
    "pytest-timeout>=2.4.0",
]

[project.optional-dependencies]
# Performance optimization features
performance = [
    "numba>=0.56.0,<1.0.0",  # JIT compilation
    "polars>=0.20.0,<1.0.0",  # Fast dataframes
    "scikit-learn-intelex>=2021.0;platform_machine=='x86_64'",  # Intel optimization
    "mkl>=2021.0;platform_machine=='x86_64'",  # Intel MKL
    "catboost>=1.0.0,<2.0.0",  # Advanced gradient boosting
    "scikit-optimize>=0.9.0,<1.0.0",  # Bayesian optimization
]

# Web API and service features
api = [
    "fastapi>=0.100.0,<1.0.0",
    "uvicorn[standard]>=0.20.0,<1.0.0", 
    "pydantic>=2.0.0,<3.0.0",
    "httpx>=0.24.0,<1.0.0",
    "aiofiles>=23.0.0,<25.0.0",
    "python-multipart>=0.0.6,<1.0.0",
    "python-dotenv>=1.0.0,<2.0.0",
    "cryptography>=40.0.0,<46.0.0",
]

# Model deployment and serving
deployment = [
    "onnx>=1.12.0,<2.0.0",
    "onnxruntime>=1.12.0,<2.0.0", 
    "treelite>=3.0.0,<5.0.0",
    "treelite-runtime>=3.0.0,<4.0.0",
    "mlflow>=2.0.0,<3.0.0",
]

# Advanced data processing
advanced-data = [
    "dask[complete]>=2023.0.0,<2026.0.0",
    "polars>=0.20.0,<1.0.0",
    "dill>=0.3.0,<1.0.0",
    "memory-profiler>=0.60.0,<1.0.0",
]

# Visualization and reporting  
visualization = [
    "matplotlib>=3.5.0,<4.0.0",
    "seaborn>=0.11.0,<1.0.0", 
    "plotly>=5.0.0,<6.0.0",
    "statsmodels>=0.13.0,<1.0.0",
]

# Deep learning frameworks (optional)
pytorch = [
    "torch>=1.12.0,<3.0.0",
    "torchvision>=0.13.0,<1.0.0",
]

tensorflow = [
    "tensorflow>=2.10.0,<3.0.0",
]

# NLP and text processing
nlp = [
    "nltk>=3.8,<4.0",
    "transformers>=4.20.0,<5.0.0",
    "tokenizers>=0.13.0,<1.0.0", 
]

# Computer vision
vision = [
    "pillow>=9.0.0,<12.0.0",
    "scikit-image>=0.19.0,<1.0.0",
    "opencv-python>=4.5.0,<5.0.0",
]

# Development and testing
dev = [
    "pytest>=7.0.0,<9.0.0",
    "pytest-asyncio>=0.21.0,<1.0.0",
    "pytest-cov>=4.0.0,<5.0.0",
    "ruff>=0.1.0,<1.0.0",
    "black>=23.0.0,<25.0.0", 
    "mypy>=1.0.0,<2.0.0",
    "pre-commit>=3.0.0,<4.0.0",
]

# Documentation
docs = [
    "mkdocs>=1.4.0,<2.0.0",
    "mkdocs-material>=9.0.0,<10.0.0",
    "mkdocs-jupyter>=0.24.0,<1.0.0",
]

# Jupyter and interactive development
jupyter = [
    "jupyter>=1.0.0,<2.0.0",
    "ipython>=8.0.0,<9.0.0",
    "notebook>=6.4.0,<8.0.0",
    "jupyterlab>=3.4.0,<5.0.0",
]

# Production monitoring and observability
monitoring = [
    "prometheus-client>=0.16.0,<1.0.0",
    "docker>=6.0.0,<8.0.0",
    "redis>=4.0.0,<6.0.0",
]

# Database and storage
storage = [
    "sqlalchemy>=1.4.0,<3.0.0",
    "alembic>=1.8.0,<2.0.0",
    "boto3>=1.26.0,<2.0.0",  # AWS
    "google-cloud-storage>=2.0.0,<3.0.0",  # GCS
    "azure-storage-blob>=12.0.0,<13.0.0",  # Azure
]

# All optional dependencies
all = [
    "kolosal-automl[performance,api,deployment,advanced-data,visualization,pytorch,nlp,vision,monitoring,storage]"
]

# Complete development environment
dev-all = [
    "kolosal-automl[all,dev,docs,jupyter]"
]

[project.urls]
Homepage = "https://github.com/Genta-Technology/kolosal-automl"
Repository = "https://github.com/Genta-Technology/kolosal-automl"
Documentation = "https://kolosal-automl.readthedocs.io"
Issues = "https://github.com/Genta-Technology/kolosal-automl/issues"

[project.scripts]
kolosal-train = "modules.cli:train_command"
kolosal-predict = "modules.cli:predict_command"
kolosal-serve = "modules.cli:serve_command"
kolosal-compile = "modules.compiler:cli_compile_command"

[build-system]
requires = ["setuptools>=65", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["."]
include = ["modules*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
modules = ["*.yaml", "*.yml", "*.json", "*.toml"]

# Development tools configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "functional: Functional tests", 
    "integration: Integration tests",
    "slow: Slow tests",
    "gpu: Tests requiring GPU",
    "api: API tests",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.ruff]
target-version = "py39"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
exclude = [
    ".git",
    "__pycache__",
    "dist",
    "build",
    ".venv",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/**/*" = ["B011"]  # Allow assert False in tests

[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "sklearn.*",
    "pandas.*", 
    "numpy.*",
    "matplotlib.*",
    "seaborn.*",
    "plotly.*",
    "optuna.*",
    "mlflow.*",
    "numba.*",
    "catboost.*",
    "lightgbm.*",
    "xgboost.*",
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["modules"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
