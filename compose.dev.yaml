# Development override for docker-compose
# Usage: docker-compose -f compose.yaml -f compose.dev.yaml up

version: '3.9'

services:
  kolosal-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime  # Use runtime stage for faster development builds
    environment:
      # Development environment overrides
      API_ENV: development
      API_DEBUG: true
      LOG_LEVEL: DEBUG
      
      # Relaxed security for development
      SECURITY_ENV: development
      SECURITY_REQUIRE_API_KEY: false
      SECURITY_ENABLE_RATE_LIMITING: false
      SECURITY_ENABLE_JWT: false
      SECURITY_ALLOWED_ORIGINS: "*"
      
      # Development API keys
      API_KEYS: dev_key,test_key
      
      # Faster batch processing for development
      BATCH_TIMEOUT: 0.001
      BATCH_MAX_SIZE: 32
      
    volumes:
      # Mount source code for development (hot reload)
      - .:/app
      - /app/__pycache__  # Exclude pycache
      - /app/.pytest_cache  # Exclude pytest cache
      
    # Override CMD for development with auto-reload
    command: >
      uvicorn modules.api.app:app
      --host 0.0.0.0
      --port 8000
      --reload
      --log-level debug
      --access-log
      --use-colors
      
    # Development ports
    ports:
      - "8000:8000"  # Direct API access
      - "8001:8001"  # Debug port if needed
      
    # Remove health check for development (faster startup)
    healthcheck:
      disable: true

  # Simplified Redis for development
  redis:
    environment:
      # Simpler Redis config for development
      - REDIS_MAXMEMORY=128mb
    command: redis-server --appendonly no --save ""

  # Development-only services
  # Hot-reload documentation server
  docs:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder  # Use builder stage for docs
    command: >
      sh -c "
      pip install mkdocs mkdocs-material &&
      mkdocs serve --dev-addr=0.0.0.0:8002
      "
    ports:
      - "8002:8002"
    volumes:
      - .:/app
      - ./docs:/app/docs
    networks:
      - kolosal-network

  # Database for development (PostgreSQL)
  postgres:
    image: postgres:15-alpine
    container_name: kolosal-postgres-dev
    environment:
      POSTGRES_DB: kolosal_dev
      POSTGRES_USER: kolosal
      POSTGRES_PASSWORD: dev_password_123
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - kolosal-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kolosal"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Jupyter notebook for development and experimentation
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    command: >
      sh -c "
      pip install jupyter jupyterlab ipython notebook &&
      jupyter lab --ip=0.0.0.0 --port=8888 --allow-root --no-browser --NotebookApp.token='' --NotebookApp.password=''
      "
    ports:
      - "8888:8888"
    volumes:
      - .:/app
      - ./notebooks:/app/notebooks
    environment:
      JUPYTER_ENABLE_LAB: "yes"
    networks:
      - kolosal-network

  # Remove production services not needed in development
  nginx:
    profiles:
      - production  # Only start with --profile production

  prometheus:
    profiles:
      - monitoring  # Only start with --profile monitoring

  grafana:
    profiles:
      - monitoring  # Only start with --profile monitoring

  loki:
    profiles:
      - monitoring  # Only start with --profile monitoring

volumes:
  postgres_dev_data:
    driver: local

# Override network for development
networks:
  kolosal-network:
    driver: bridge
