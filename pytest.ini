[pytest]
# Test discovery
pythonpath = .
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Output and logging  
addopts = -ra --strict-markers --disable-warnings --tb=short -s -v --log-file=tests/test.log --log-file-level=INFO --log-cli-level=INFO --log-file-format="%(asctime)s [%(levelname)s] %(name)s: %(message)s" --log-cli-format="%(asctime)s [%(levelname)s] %(name)s: %(message)s" --capture=tee-sys --durations=10 -m "not benchmark and not stress and not memory"

# Logging configuration to prevent shutdown errors
log_auto_indent = true
log_capture = true

# Prevent logging issues during shutdown
filterwarnings = 
    ignore::pytest.PytestUnraisableExceptionWarning
    ignore::DeprecationWarning

# Markers for test categorization
markers =
    unit: Unit tests
    functional: Functional/API tests
    integration: Integration tests
    slow: Slow running tests
    gpu: Tests requiring GPU
    network: Tests requiring network access
    benchmark: Performance benchmark tests (excluded by default)
    stress: Stress tests for high load scenarios
    memory: Memory usage and leak tests
    consistency: Data consistency and reproducibility tests
    throughput: Throughput and concurrent processing tests
    inference: Inference engine performance tests
    data_loading: Data loading and I/O performance tests
    ui: User interface performance tests
    imports: Import and startup performance tests
    ml: Machine learning operation tests

# Minimum version
minversion = 6.0

# Test timeout (in seconds) - increased for benchmark tests
timeout = 600

# Parallel execution for benchmarks (uncomment if pytest-xdist is installed)
# For benchmarks, we typically want to run sequentially for accurate measurements
# addopts = -n 1
